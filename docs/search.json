{"Protocols/AnyFlowRepresentable.html#/s:15DynamicWorkflow20AnyFlowRepresentableP20preferredLaunchStyleAA16PresentationTypeOvp":{"name":"preferredLaunchStyle","abstract":"<p>preferredLaunchStyle: Gives the ability for a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/FlowRepresentable.html\">FlowRepresentable</a></code> to describe how it best shows up. For example a view can claim it preferrs to be launched in a navigationStack</p>","parent_name":"AnyFlowRepresentable"},"Protocols/AnyFlowRepresentable.html#/s:15DynamicWorkflow20AnyFlowRepresentableP8workflowAA0B0CSgvp":{"name":"workflow","abstract":"<p>workflow: Access to the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Workflow.html\">Workflow</a></code> controlling the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/FlowRepresentable.html\">FlowRepresentable</a></code>. A common use case may be a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/FlowRepresentable.html\">FlowRepresentable</a></code> that wants to abandon the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Workflow.html\">Workflow</a></code> it&rsquo;s in.</p>","parent_name":"AnyFlowRepresentable"},"Protocols/AnyFlowRepresentable.html#/s:15DynamicWorkflow20AnyFlowRepresentableP8instanceAaB_pyFZ":{"name":"instance()","abstract":"<p>instance: A method to return an instance of the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/FlowRepresentable.html\">FlowRepresentable</a></code></p>","parent_name":"AnyFlowRepresentable"},"Protocols/Presenter.html#/s:15DynamicWorkflow9PresenterP8ViewTypeQa":{"name":"ViewType","abstract":"<p>ViewType: The type your presenter deals with (e.g. UIViewController)</p>","parent_name":"Presenter"},"Protocols/Presenter.html#/s:15DynamicWorkflow9PresenterP6launch4view4from15withLaunchStyley8ViewTypeQz_AiA012PresentationK0OtF":{"name":"launch(view:from:withLaunchStyle:)","abstract":"<p>launch: A method to let the presenter know it needs to present a view</p>","parent_name":"Presenter"},"Protocols/FlowRepresentable.html#/s:15DynamicWorkflow17FlowRepresentableP10IntakeTypeQa":{"name":"IntakeType","abstract":"<p>IntakeType: The data type required to be passed to your FlowRepresentable (use <code>Any?</code> if you don&rsquo;t care)</p>","parent_name":"FlowRepresentable"},"Protocols/FlowRepresentable.html#/s:15DynamicWorkflow17FlowRepresentableP10shouldLoad4withSb10IntakeTypeQz_tF":{"name":"shouldLoad(with:)","abstract":"<p>shouldLoad: A method indicating whether it makes sense for this view to load in a workflow</p>","parent_name":"FlowRepresentable"},"Protocols/FlowRepresentable.html#/s:15DynamicWorkflow17FlowRepresentablePAAs5NeverO10IntakeTypeRtzrlE10shouldLoadSbyF":{"name":"shouldLoad()","abstract":"<p>shouldLoad: A method indicating whether it makes sense for this view to load in a workflow</p>","parent_name":"FlowRepresentable"},"Protocols/FlowRepresentable.html":{"name":"FlowRepresentable","abstract":"<p>FlowRepresentable: A typed version of &lsquo;AnyFlowRepresentable&rsquo;. Use this on views that you want to add to a workflow.</p>"},"Protocols/Presenter.html":{"name":"Presenter","abstract":"<p>Presenter: Used in the event you want to create your own kind of presenter.</p>"},"Protocols/AnyFlowRepresentable.html":{"name":"AnyFlowRepresentable","abstract":"<p>AnyFlowRepresentable: A type erased version of &lsquo;FlowRepresentable&rsquo;. Generally speaking don&rsquo;t use this directly, use FlowRepresentable instead.</p>"},"Extensions/UIViewController.html#/s:So16UIViewControllerC15DynamicWorkflowE10launchInto_4args15withLaunchStyle8onFinishyAC0D0C_ypSgAC16PresentationTypeOyAJcSgtF":{"name":"launchInto(_:args:withLaunchStyle:onFinish:)","abstract":"<p>launchInto: When using UIKit this is how you launch a workflow</p>","parent_name":"UIViewController"},"Extensions/UIViewController.html":{"name":"UIViewController"},"Enums/PresentationType.html#/s:15DynamicWorkflow16PresentationTypeO15navigationStackyA2CmF":{"name":"navigationStack","abstract":"<p>navigationStack: Indicates a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/FlowRepresentable.html\">FlowRepresentable</a></code> should be launched in a navigation stack of some kind (For example with UIKit this would use a UINavigationController)</p>","parent_name":"PresentationType"},"Enums/PresentationType.html#/s:15DynamicWorkflow16PresentationTypeO7modallyyA2CmF":{"name":"modally","abstract":"<p>modally: Indicates a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/FlowRepresentable.html\">FlowRepresentable</a></code> should be launched modally</p>","parent_name":"PresentationType"},"Enums/PresentationType.html#/s:15DynamicWorkflow16PresentationTypeO7defaultyA2CmF":{"name":"default","abstract":"<p>default: Indicates a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/FlowRepresentable.html\">FlowRepresentable</a></code> can be launched contextually</p>","parent_name":"PresentationType"},"Enums/PresentationType.html":{"name":"PresentationType","abstract":"<p>PresentationType: An enum that indicates how FlowRepresentables should be presented</p>"},"Classes/Workflow.html#/s:15DynamicWorkflow0B0C7abandon8animated8onFinishySb_yycSgtF":{"name":"abandon(animated:onFinish:)","abstract":"<p>abandon: Called when the workflow should be terminated, and the app should return to the point before the workflow was launched</p>","parent_name":"Workflow"},"Classes/LinkedList/Node.html#/s:15DynamicWorkflow10LinkedListC4NodeC5Valuea":{"name":"Value","abstract":"<p>Value: A typealias that is equivalent to the specialized type in the LinkedList</p>","parent_name":"Node"},"Classes/LinkedList/Node.html#/s:15DynamicWorkflow10LinkedListC4NodeC5valueqd__vp":{"name":"value","abstract":"<p>value: The concrete value the node is holding onto</p>","parent_name":"Node"},"Classes/LinkedList/Node.html#/s:15DynamicWorkflow10LinkedListC4NodeC4nextAEyx_qd__GSgvp":{"name":"next","abstract":"<p>next: An optional reference to the next node in the LinkedList</p>","parent_name":"Node"},"Classes/LinkedList/Node.html#/s:15DynamicWorkflow10LinkedListC4NodeC8previousAEyx_qd__GSgvp":{"name":"previous","abstract":"<p>previous: An optional reference to the previous node in the LinkedList</p>","parent_name":"Node"},"Classes/LinkedList/Node.html#/s:15DynamicWorkflow10LinkedListC4NodeC8traverseyAEyx_qd__GSgSiF":{"name":"traverse(_:)","abstract":"<p>traverse(distance): A method to move N spaces forwards or backwards through the nodes</p>","parent_name":"Node"},"Classes/LinkedList/Node.html#/s:15DynamicWorkflow10LinkedListC4NodeC8traverseyAEyx_qd__GSgSbAGXEF":{"name":"traverse(_:)","abstract":"<p>traverse(Until): A method to move forward through the nodes until a precondition is met</p>","parent_name":"Node"},"Classes/LinkedList/Node.html#/s:15DynamicWorkflow10LinkedListC4NodeC13traverseToEndAEyx_qd__GyF":{"name":"traverseToEnd()","abstract":"<p>traverseToEnd: A method to move forward through the nodes until there is no <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LinkedList/Node.html#/s:15DynamicWorkflow10LinkedListC4NodeC4nextAEyx_qd__GSgvp\">next</a></code></p>","parent_name":"Node"},"Classes/LinkedList/Node.html#/s:15DynamicWorkflow10LinkedListC4NodeC19traverseToBeginningAEyx_qd__GyF":{"name":"traverseToBeginning()","abstract":"<p>traverseToBeginning: A method to move backwards through the nodes until there is no <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LinkedList/Node.html#/s:15DynamicWorkflow10LinkedListC4NodeC8previousAEyx_qd__GSgvp\">previous</a></code></p>","parent_name":"Node"},"Classes/LinkedList/Node.html#/s:15DynamicWorkflow10LinkedListC4NodeC8positionSivp":{"name":"position","abstract":"<p>position: A computed property that calculates a nodes position in the LinkedList</p>","parent_name":"Node"},"Classes/LinkedList/Node.html#/s:15DynamicWorkflow10LinkedListC4NodeC4copyAEyx_qd__GyF":{"name":"copy()","abstract":"<p>copy: Creates an exact replica of the node, including the next and previous values, this essentially deep copies the entire LinkedList</p>","parent_name":"Node"},"Classes/LinkedList.html#/s:ST7ElementQa":{"name":"Element","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:ST8IteratorQa":{"name":"Iterator","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC10startIndexSivp":{"name":"startIndex","abstract":"<p>startIndex: The beginning index of the linked list (0 indexed)</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC8endIndexSivp":{"name":"endIndex","abstract":"<p>endIndex: The last index in the list</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC11descriptionSSvp":{"name":"description","abstract":"<p>description: A property indicating what to show when the LinkedList is printed.</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC7isEmptySbvp":{"name":"isEmpty","abstract":"<p>isEmpty: A boolean to indicate whether the linked list contains any values</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC5countSivp":{"name":"count","abstract":"<p>endIndex: The last index in the list</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC5firstAC4NodeCyx_xGSgvp":{"name":"first","abstract":"<p>first: The first node in the list</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC4lastAC4NodeCyx_xGSgvp":{"name":"last","abstract":"<p>last: The last node in the list</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC12arrayLiteralACyxGxd_tcfc":{"name":"init(arrayLiteral:)","abstract":"<p>init(arrayLiteral): A LinkedList can be instantiated with an array literal","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListCyACyxGxd_tcfc":{"name":"init(_:)","abstract":"<p>init(elements): A LinkedList can be instantiated with variadic arguments","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListCyACyxGSayxGcfc":{"name":"init(_:)","abstract":"<p>init(elements): A LinkedList can be instantiated with an array","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListCyACyxGAC4NodeCyx_xGSgcfc":{"name":"init(_:)","abstract":"<p>init(elements): A LinkedList can be instantiated simply by providing the first node in the list</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:ST12makeIterator0B0QzyF":{"name":"makeIterator()","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListCAASLRzlE3maxxSgyF":{"name":"max()","abstract":"<p>max: Returns the maximum value in the comparable LinkedList</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListCAASLRzlE3minxSgyF":{"name":"min()","abstract":"<p>min: Returns the minimum value in the comparable LinkedList</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:SQ2eeoiySbx_xtFZ":{"name":"==(_:_:)","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListCAASQRzlE8containsySbxF":{"name":"contains(_:)","abstract":"<p>contains: Returns a boolean indicating whether the given value is present in the LinkedList</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC6appendyyxF":{"name":"append(_:)","abstract":"<p>append: Appends a new node to the end of the LinkedList</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC6append10contentsOfyqd___t7ElementQyd__RszSTRd__lF":{"name":"append(contentsOf:)","abstract":"<p>append(ContentsOf): Appends a collection of nodes to the end of the LinkedList</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC6insert_7atIndexyx_SitF":{"name":"insert(_:atIndex:)","abstract":"<p>insert: Inserts a new node at a specified location</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC6insert10contentsOf2atyqd___Sit7ElementQyd__RszSlRd__lF":{"name":"insert(contentsOf:at:)","abstract":"<p>insert: Inserts a sequences of new nodes at a specified location</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC6remove2atySi_tF":{"name":"remove(at:)","abstract":"<p>remove(at): Removes a node at the specified index</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC11removeFirstyySiF":{"name":"removeFirst(_:)","abstract":"<p>removeFirst: Removes the first n nodes from the LinkedList</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC10removeLastyySiF":{"name":"removeLast(_:)","abstract":"<p>removeLast: Removes the last n nodes from the LinkedList</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC7popLastxSgyF":{"name":"popLast()","abstract":"<p>popLast: Removes the last n nodes from the LinkedList and returns the removed concrete type</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC9removeAllyyF":{"name":"removeAll()","abstract":"<p>removeAll: Removes all nodes from the LinkedList</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC6swapAtyySi_SitF":{"name":"swapAt(_:_:)","abstract":"<p>swapAt: Swaps the concrete values of 2 nodes</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC7replace7atIndex8withItemySi_xtF":{"name":"replace(atIndex:withItem:)","abstract":"<p>replace: Replaces the concrete value of the node at the specified index</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC7reverseyyF":{"name":"reverse()","abstract":"<p>reverse: Reverse the LinkedList</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC4sort2byySbx_xtXE_tF":{"name":"sort(by:)","abstract":"<p>sort: Sorts the linkedList</p>","parent_name":"LinkedList"},"Classes/LinkedList/Node.html":{"name":"Node","abstract":"<p>LinkedList.Node: A type to hold onto elements in a LinkedList</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC8reversedACyxGyF":{"name":"reversed()","abstract":"<p>reversed: Return a new version of the LinkedList with all elements reversed</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC9replacing7atIndex8withItemACyxGSi_xtF":{"name":"replacing(atIndex:withItem:)","abstract":"<p>replacing: Return a new version of the LinkedList with a specific element replaced</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC6sorted2byACyxGSbx_xtXE_tF":{"name":"sorted(by:)","abstract":"<p>sorted: Return a new sorted version of the LinkedList</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC9dropFirstyACyxGSiF":{"name":"dropFirst(_:)","abstract":"<p>dropFirst: Return a new version of the LinkedList without the first n items</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC8dropLastyACyxGSiF":{"name":"dropLast(_:)","abstract":"<p>dropFirst: Return a new version of the LinkedList without the last n items</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC4drop5whileACyxGSbxKXE_tKF":{"name":"drop(while:)","abstract":"<p>drop(while): Return a new version of the LinkedList without the last n items</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC6prefixyACyxGSiF":{"name":"prefix(_:)","abstract":"<p>prefix(maxLength): Return a new version of the LinkedList with just the first n items</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC6prefix5whileACyxGSbxKXE_tKF":{"name":"prefix(while:)","abstract":"<p>prefix(while): Return a new version of the LinkedList with just the first n items</p>","parent_name":"LinkedList"},"Classes/LinkedList.html#/s:15DynamicWorkflow10LinkedListC6suffixyACyxGSiF":{"name":"suffix(_:)","abstract":"<p>suffix(maxLength): Return a new version of the LinkedList with just the last n items</p>","parent_name":"LinkedList"},"Classes/LinkedList.html":{"name":"LinkedList","abstract":"<p>LinkedList: A sequence type used to create a doubly linked list</p>"},"Classes.html#/s:15DynamicWorkflow14UIWorkflowItemC":{"name":"UIWorkflowItem","abstract":"<p>UIWorkflowItem: A subclass of UIViewController designed for convenience. This does <strong>NOT</strong> have to be used, it simply removes some of the overhead that normally comes with a FlowRepresentable.</p>"},"Classes/Workflow.html":{"name":"Workflow","abstract":"<p>Workflow: A doubly linked list of AnyFlowRepresentable types. Can be used to create a user flow.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"}}